{"version":3,"sources":["Search/Geo/Geo1.js","Search/Geo/Geo2.js","Search/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Geo1","props","handleChange","address","setState","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","console","log","catch","error","state","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","style","padding","action","placeholder","type","id","map","suggestion","active","backgroundColor","cursor","onClick","description","placeId","React","Component","Geo2","useState","users","setUsers","text","setText","setsuggestions","useEffect","loadUsers","a","axios","get","response","data","e","matches","length","filter","user","regex","RegExp","treatment_name","match","onHandleChange","target","item","onSuggestHandler","Search","display","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d942da1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\n \r\nclass Geo1 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { address: ''};\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(function(position) {\r\n      console.log(\"Latitude is :\", position.coords.latitude, \"Longitude is :\", position.coords.longitude);\r\n    });\r\n  }\r\n  \r\n  handleChange = address => {\r\n    this.setState({ address });\r\n  };\r\n \r\n  handleSelect = address => {\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => console.log('Success', latLng))\r\n      .catch(error => console.error('Error', error));\r\n  };\r\n \r\n  render() {\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <div className=\"search-box\" style={{padding: \"0\"}}>\r\n           \r\n            <form className=\"form-design\" action=\"assets/webpages/list.html\">\r\n\r\n            <div className='search-location'>\r\n            <input  \r\n            {...getInputProps({placeholder: 'Search Places ...', \r\n            className: 'location-search-input',})}\r\n            type=\"text\" \r\n            id=\"location\" \r\n            placeholder=\"Search Location\"/>                \r\n              <div \r\n              className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                      const className = suggestion.active\r\n                      ? 'suggestion-item--active'\r\n                      : 'suggestion-item';\r\n                      // inline style for demonstration purpose\r\n                      const style = suggestion.active\r\n                      ? { backgroundColor: 'rgba(238, 238, 232, .9)',padding: \".5rem\",  cursor: 'pointer' }\r\n                      : { backgroundColor: '#fdfdfd',padding: \".5rem\", cursor: 'pointer' };\r\n                      return (\r\n                      <div \r\n                          key={suggestion.placeId} \r\n                          {...getSuggestionItemProps(suggestion, {\r\n                          className,\r\n                          style,\r\n                          })}\r\n                      >\r\n                        <span\r\n                        \r\n                        onClick={() => this.handleChange(suggestion.description)}>\r\n                          {suggestion.description}\r\n                        </span>\r\n                        </div>\r\n                        );\r\n                    })}\r\n                  </div>\r\n            </div>\r\n          \r\n            </form>\r\n          </div>\r\n        </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    );\r\n   \r\n  }\r\n} export default Geo1;","import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction Geo2() {\r\n\r\n    const [ users, setUsers ] = useState([]);\r\n    const [ text, setText ] = useState('');\r\n    const [ suggestions, setsuggestions ] = useState([])\r\n\r\n    useEffect(() => {\r\n        const loadUsers = async() => {\r\n          const response = await axios.get('http://184.168.117.236/test/admin/api_symptom.php')\r\n          \r\n          setUsers(response.data)\r\n        }\r\n        loadUsers()\r\n      },[])\r\n\r\n    const onSuggestHandler = (text) => {\r\n      setText(text)\r\n    }\r\n    const onHandleChange = (text) => {\r\n      let matches = []\r\n      if(text.length > 0) {\r\n        matches = users.filter(user => {\r\n          const regex = new RegExp(`${text}`, \"gi\");\r\n          return user.treatment_name.match(regex)\r\n        })\r\n      }\r\n      console.log('matches', matches)\r\n      setsuggestions(matches)\r\n      setText(text)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <input \r\n            type=\"text\" \r\n            onChange={e => onHandleChange(e.target.value)} \r\n            placeholder='Search Symptoms'\r\n            value={text}/>\r\n      {suggestions && suggestions.map((suggestion, item) => {\r\n        return(\r\n         <div \r\n         key={item}\r\n         onClick={() => onSuggestHandler(suggestion.treatment_name)}>{suggestion.treatment_name}</div>\r\n        )\r\n      })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Geo2\r\n","import React from 'react'\r\nimport Geo1 from \"./Geo/Geo1\";\r\nimport Geo2 from \"./Geo/Geo2\";\r\n\r\nfunction Search() {\r\n    return (\r\n        <div style={{display: 'flex'}}>\r\n            <Geo1/>\r\n            <Geo2/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from \"react\";\nimport Search from \"./Search/Search\";\n\n\nfunction App() {\n  return (\n    <>\n    <Search/>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}